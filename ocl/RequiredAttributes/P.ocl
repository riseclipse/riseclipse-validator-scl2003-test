/*
*************************************************************************
**  Copyright (c) 2016-2022 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

import '../Helpers/Enums.ocl'

package scl

context P
-- extends PAddr

    -- The type attribute shall be present and shall not be the empty string.
    inv P_type_required
        (   'ERROR;'
          + 'OCL/RequiredAttributes/P_type_required;'
          + self.lineNumber.toString() + ';'
          + 'type attribute shall be present in P'
        )
    :
        self.type <> null

    -- the type attribute shall be one of the predefined values or shall start with a capital letter,
    -- and contain only alphanumeric characters and dashes(-)
    inv P_type_valid
        (   'ERROR;'
          + 'OCL/RequiredAttributes/P_type_valid;'
          + self.lineNumber.toString() + ';'
          + 'type attribute shall be valid in P. ' + 'Current value is ' + self.type.toString()
        )
    :
        self.type <> null implies self.validSclPTypeEnum( type )
    
    -- The content of P shall be valid according to its type.
    inv P_value
        (   'ERROR;'
          + 'OCL/RequiredAttributes/P_value;'
          + self.lineNumber.toString() + ';'
          + 'content shall be valid according to its type in P. ' + 'Current value is ' + self.value.toString() + ' for type ' + self.type.toString()
        )
    :
        if self.type = 'IP' or self.type = 'IP-SUBNET' or self.type = 'IP-GATEWAY' then
            -- XSD: <xs:pattern value="([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])"/>
            self.value.matches( '([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])' )
        else if self.type = 'IPv6' or self.type = 'IPv6-GATEWAY' then
            self.value.matches( '([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}' )
        else if self.type = 'IPv6-SUBNET' then
            self.value.matches( '/[1-9]|/[1-9][0-9]|/1[0-1][0-9]|/12[0-7]' )
        else if self.type = 'DNSName' then
            -- XSD: <xs:pattern value="\S*"/>
            -- \s and \S not recognized ? 
            self.value.matches( '[- \t\n\u000B\f\r]*' )  -- Tests Needed
        else if self.type = 'IPv6FlowLabel' then
            self.value.matches( '[0-9a-fA-F]{1,5}' )
        else if self.type = 'OSI-NSAP' then
            self.value.matches( '[0-9A-F]{1,40}' )
        else if self.type = 'OSI-TSEL' then
            self.value.matches( '[0-9A-F]{1,8}' )
        else if self.type = 'OSI-SSEL' or self.type = 'OSI-PSEL' then
            self.value.matches( '[0-9A-F]{1,16}' )
        else if self.type = 'OSI-AP-Title' then
            self.value.matches( '[0-9\u002C]+' )     -- Tests Needed 
        else if self.type = 'OSI-AP-Invoke' or self.type = 'OSI-AE-Qualifier' or self.type = 'OSI-AE-Invoke' then
            self.value.matches( '[0-9]{1,5}' )
        else if self.type = 'MAC-Address' then
            --<xs:pattern value="[0-9A-F]{2}\-[0-9A-F]{2}\-[0-9A-F]{2}\-[0-9A-F]{2}\-[0-9A-F]{2}\-[0-9A-F]{2}"/>
            self.value.matches( '[0-9A-F]{2}\u002D[0-9A-F]{2}\u002D[0-9A-F]{2}\u002D[0-9A-F]{2}\u002D[0-9A-F]{2}\u002D[0-9A-F]{2}' )
        else if self.type = 'APPID' then
            self.value.matches( '[0-9A-F]{4}' )
        else if self.type = 'VLAN-PRIORITY' then
            self.value.matches( '[0-7]' ) 
        else if self.type = 'VLAN-ID' then
            self.value.matches( '[0-9A-F]{3}' ) 
        else if self.type = 'SNTP-Port' or self.type = 'MMS-Port' or self.type = 'IP-UDP-PORT' or self.type = 'IP-TCP-PORT' then
            self.value.matches( '[1-9][0-9]{0,3}' ) or self.value.matches( '[1-5][0-9]{4,4}' ) or self.value.matches( '6[0-4][0-9]{3,3}' )
            or self.value.matches( '65[0-4][0-9]{2,2}' ) or self.value.matches( '655[0-2][0-9]' ) or self.value.matches( '6553[0-5]' )
            or self.value.matches( '0' )
        else if self.type = 'IPv6ClassOfTraffic' then
            self.value.matches( '[0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]' ) 
        else if self.type = 'C37-118-IP-Port' then
            self.value.matches( '102[5-9]|10[3-9][0-9]|1[1-9][0-9][0-9]|[2-9][0-9]{3}|[1-5][0-9]{4}|6[0-4][0-9]{3}|65[0-4][0-9]{2}|655[0-2][0-9]|6553[0-5]' )
        else if self.type = 'IPv6-IGMPv3Src' then
            self.value.matches( '([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}' )
        else if self.type = 'IP-IGMPv3Src' then
            self.value.matches( '([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])\u002E([0-9]{1,2}|1[0-9]{2}|2[0-4][0-9]|25[0-5])' )
        else if self.type = 'IP-ClassOfTraffic' then
            self.value.matches( '[0-9A-F]{1,2}' ) 
        else true
            
           
           
        endif endif endif endif endif endif endif endif endif endif 
        endif endif endif endif endif endif endif endif endif endif


endpackage

