/*
*************************************************************************
**  Copyright (c) 2016-2022 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context DOType

    -- Recursive references are not allowed
    def: getReferencedDOTypeIDs() : Set( String ) =
        self.SDO->iterate( s : SDO, res : Set( String ) = Set{} |
            res->including( s.type )
        )
    
    def: getReferencedDOType( id : String ) : DOType =
        let doTypes : Set( DOType ) = self.ParentDataTypeTemplates.DOType->select( d : DOType | d.id = id ) in
        if( doTypes->size() = 1 ) then
            doTypes->any( true )
        else if( doTypes->size() = 0 ) then
            null
        else
            invalid
        endif endif
    
    def: checkRecursiveReferenced( current : Set( String )) : Tuple( ok : Boolean, set : Set( String )) =
        let newIDs  : Set( String ) = current->iterate( s : String, res : Set( String ) = Set{} |
            let doType : DOType = self.getReferencedDOType( s ) in
            if( doType.oclIsInvalid() ) then
                invalid
            else if( doType = null ) then
                res
            else
                res->union( doType.getReferencedDOTypeIDs() )
            endif endif
        ) in
        if( newIDs->isEmpty() ) then
            Tuple{ ok : Boolean = true, set : Set( String ) = Set{} }
        else if( newIDs->includes( self.id )) then
            Tuple{ ok : Boolean = false, set : Set( String ) = Set{} }
        else
            checkRecursiveReferenced( newIDs )
        endif endif
    
    inv DOType_recursive_references_are_not_allowed
        (   'ERROR;'
          + 'OCL/SemanticConstraints/DOType_recursive_references_are_not_allowed;'
          + self.lineNumber.toString() + ';'
          + 'DOType (id=' + self.id.toString() + ') has a recursive reference to itself'
        )
    :
        self.checkRecursiveReferenced( Set{ self.id } ).ok
        
    -- The DOType in DataTypeTemplates shall have unique child name (from SCL_DataTypeTemplates.xsd)
    inv unique_child_name_in_DOType_from_DataTypeTemplates
        (   'ERROR;'
          + 'OCL/SemanticConstraints/unique_child_name_in_DOType_from_DataTypeTemplates;'
          + self.lineNumber.toString() + ';'
          + 'Unique child name in DOType from DataTypeTemplates'
        )
    :
        self.oclContainer.oclIsTypeOf(DataTypeTemplates) implies
        self.DA.name -> union(self.SDO.name) -> isUnique(s:SclObject|s)
        

endpackage

