/*
*************************************************************************
**  Copyright (c) 2016-2022 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context Substation

    -- Within a Substation, there cannot be two LNode elements with the same
    -- combination of lnInst, lnClass, iedName, ldInst, and prefix.
    -- done in LNodeContainer.ocl      

    -- Within a Substation, there cannot be two direct PowerTransformer elements
    -- with the same name.
    -- done in EquipmentContainer.ocl

    -- Within a Substation, there cannot be two direct GeneralEquipment elements
    -- with the same name.
    -- done in EquipmentContainer.ocl 

    -- Within a Substation, there cannot be two VoltageLevel elements with the
    -- same name.
    inv Substation_unique_VoltageLevel_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/Substation_unique_VoltageLevel_name;'
          + self.lineNumber.toString() + ';'
          + 'VoltageLevel in Substation shall have different name'
        )
    :
        self.VoltageLevel->isUnique( v : VoltageLevel | v.name )

    -- Within a Substation, there cannot be two Function elements with the same
    -- name.
    inv Substation_unique_Function_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/Substation_unique_Function_name;'
          + self.lineNumber.toString() + ';'
          + 'Function in Substation shall have different name'
        )
    :
        self.Function->isUnique( f : Function | f.name )

    -- In order to avoid any ambiguities, within a Substation there cannot be two
    -- direct child elements with the same name.
    inv Substation_unique_DirectChild_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/Substation_unique_DirectChild_name;'
          + self.lineNumber.toString() + ';'
          + 'All direct childs in Substation shall have different name'
        )
    :
        self.oclContents()->selectByKind( scl::Naming )->isUnique( n : Naming | n.name )
        -- Version when oclContents() is not available
        --   let childs_1 : OrderedSet( Naming ) = self.Function
        --in let childs_2 : OrderedSet( Naming ) = childs_1->union( self.GeneralEquipment )
        --in let childs_3 : OrderedSet( Naming ) = childs_2->union( self.PowerTransformer )
        --in let childs_4 : OrderedSet( Naming ) = childs_3->union( self.VoltageLevel )
        --in childs_4->isUnique( n : Naming | n.name )

    -- In general, at each hierarchy level within the substation section all
    -- names shall be unique, leading to unique object
    inv unique_name_same_level_in_Substation
        (   'ERROR;'
          + 'OCL/SemanticConstraints/unique_name_same_level_in_Substation;'
          + self.lineNumber.toString() + ';'
          + 'All names shall be unique at each hierarchy level within the Substation'
        )
    :   
        if self.ParentSCL <> null then
        SclObject.allInstances()->
        select(s:SclObject|self.ParentSCL.oclContents()->
            select(s:SclObject|s.lineNumber>self.lineNumber)->
            forAll(s1:SclObject|s1.lineNumber>s.lineNumber) 
            and s.lineNumber>self.lineNumber)->
            select(s:SclObject|s.oclIsKindOf(Naming))->
            exists(n1:Naming;n2:Naming|n1<>n2 
                and n1.oclContainer=n2.oclContainer 
                and n1.name=n2.name) implies false
        else
        SclObject.allInstances()->
        select(s:SclObject|self.ParentProcess.oclContents()->
            select(s:SclObject|s.lineNumber>self.lineNumber)->
            forAll(s1:SclObject|s1.lineNumber>s.lineNumber) 
            and s.lineNumber>self.lineNumber)->
            select(s:SclObject|s.oclIsKindOf(Naming))->
            exists(n1:Naming;n2:Naming|n1<>n2 
                and n1.oclContainer=n2.oclContainer 
                and n1.name=n2.name) implies false
        endif
        
    -- For a primary system template within an ICD file, the substation name
    -- shall be TEMPLATE. There can be a maximum of one substation template in one
    -- SCL file.
        -- In FileSpecifics/ICD/Substation.ocl

    -- Within a Substation, the attribute pathName of a ConnectivityNode acts as
    -- a key (a ConnectivityNode may appear at bay level below the Substation).
    -- This implies that there cannot be two ConnectivityNode elements with the
    -- same pathName. The connectivityNode attribute of each Terminal in this
    -- Substation must then refer to one of these keys.
    
    
    -- Substation name are unique within a SCL, VoltageLevel name are unique
    -- within a Substation, Bay name are unique within a Bay, and ConnectivityNode name
    -- are unique within a Bay. Therefore, if the pathName value is correct (checked
    -- in RequiredAttributes/ConnectivityNode.ocl), this will be verified
    
    -- However, 2 verifications are done:
    -- - SCL_ConnectivityNode_unique_pathName in SCL.ocl
    -- - ConnectivityNode_Terminal_consistency in ConnectivityNode.ocl and Terminal.ocl
    
    -- Substation terminals shall not reference connectivity nodes inside Line elements
    
    inv Terminal_CNode_not_refererences_Line_CNode
        (   'ERROR;'
          + 'OCL/SemanticConstraints/Terminal_CNode_not_refererences_Line_CNode;'
          + self.lineNumber.toString() + ';'
          + 'ConnectivityNode from Terminal shall not reference a ConnectivityNode from Line'
        )
        :
        Line.allInstances()->collect(l:Line|l.ConnectivityNode)->
            exists(c:ConnectivityNode|self.VoltageLevel.Bay.ConductingEquipment.Terminal
            ->collect(t:Terminal|t.cNodeName)->includes(c.name)) implies false


    -- A logical node instance within an IED can only be referenced once within all substation sections.
    
    inv unique_LN_reference_in_Substation_LNode
        (   'ERROR;'
          + 'OCL/SemanticConstraints/unique_LN_reference_in_Substation_LNode;'
          + self.lineNumber.toString() + ';'
          + 'LN reference from LNode element in Substation shall be unique in the Substation'
        )
        :
        (if SCL.allInstances().Substation -> notEmpty() then SclObject.allInstances()->
        select(s:SclObject|SCL.allInstances().oclContents()->
            select(s:SclObject|s.lineNumber>(SCL.allInstances().Substation->
                collect(s:Substation|s.lineNumber)->
                max()))->
                forAll(s1:SclObject|s1.lineNumber>s.lineNumber) and s.lineNumber>(SCL.allInstances().Substation->
                    collect(s:Substation|s.lineNumber)->max()))->
                    select(s:SclObject|s.oclIsKindOf(LNode))->
                    select(l:LNode|l.RefersToAnyLN<>null)else null.oclAsSet() endif)->
             union(if Process.allInstances() -> notEmpty() and Process.allInstances().Substation-> notEmpty() then SclObject.allInstances()->
        select(s:SclObject|Process.allInstances().oclContents()->
            select(s:SclObject|s.lineNumber>(Process.allInstances().Substation->
                collect(s:Substation|s.lineNumber)->
                max()))->
                forAll(s1:SclObject|s1.lineNumber>s.lineNumber) and s.lineNumber>(Process.allInstances().Substation->
                    collect(s:Substation|s.lineNumber)->max()))->
                    select(s:SclObject|s.oclIsKindOf(LNode))->
                    select(l:LNode|l.RefersToAnyLN<>null)else null.oclAsSet() endif) ->
                        isUnique(l:LNode|l.RefersToAnyLN)
        

    

endpackage

