/*
*************************************************************************
**  Copyright (c) 2016-2022 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context SCL

    -- The Substation name shall be unique within an SCL file.
    -- Note: Substation are contained in SCL or in Process
    inv SCL_unique_Substation_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_Substation_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All Substation within an SCL file shall have different name'
        )
    :
        scl::Substation.allInstances()->isUnique( s : Substation | s.name )
        
    -- The Process name shall be unique within an SCL file (from SCL.xsd)
    inv SCL_unique_Process_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_Process_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All Process within an SCL file shall have different name'
        )
    :
        scl::Process.allInstances()->isUnique( p : Process | p.name )
        
    -- The Line name shall be unique within an SCL file (from SCL.xsd)
    inv SCL_unique_Line_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_Line_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All Line within an SCL file shall have different name'
        )
    :
        scl::Line.allInstances()->isUnique( l : Line | l.name )

    -- The IED name shall be unique within the SCL file.
    inv SCL_unique_IED_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_IED_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All IED within an SCL file shall have different name'
        )
    :
        scl::IED.allInstances()->isUnique( i : IED | i.name )

    inv SCL_unique_ConnectivityNode_pathName
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_ConnectivityNode_pathName;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All ConnectivityNode within an SCL file shall have different pathName'
        )
    :
        scl::ConnectivityNode.allInstances()->isUnique( c : ConnectivityNode | c.pathName )
    
    -- The LD name built from inst and other parts as described in 28H8.5 shall be unique within each
    -- SCL file.
    inv SCL_unique_LDevice_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_LDevice_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All LDevice within an SCL file shall have different LD name built from inst and other parts'
        )
    :
        scl::LDevice.allInstances() -> isUnique( l : LDevice | l.ParentServer.ParentAccessPoint.ParentIED.name.concat( l.inst ))
        
    -- SubNetwork.name is "A name identifying this bus; unique within this SCL file"
    inv SCL_unique_SubNetwork_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_SubNetwork_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All SubNetwork within an SCL file shall have different name'
        )
    :
        scl::SubNetwork.allInstances() -> isUnique( s : SubNetwork | s.name )
        
    -- DOType.id is "The (SCL file global) identification of this DOType. Used to reference this type."
    inv SCL_unique_DOType_id
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_DOType_id;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All DOType within an SCL file shall have different id'
        )
    :
        scl::DOType.allInstances() -> isUnique( d : DOType | d.id )
    
    -- The LNodeType id and lnClass combination shall be unique within an SCL file (from SCL.xsd) 
    inv SCL_unique_LNodeType_id_lnClass_combination
        (   'ERROR;'
          + 'OCL/SemanticConstraints/SCL_unique_LNodeType_id_lnClass_combination;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All LNodeType within an SCL file shall have different id and lnClass combination'
        )
    :
        scl::LNodeType.allInstances() -> isUnique( l : LNodeType | Sequence{l.id,l.lnClass} )
        
endpackage



