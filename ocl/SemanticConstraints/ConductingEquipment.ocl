/*
*************************************************************************
**  Copyright (c) 2016-2022 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context ConductingEquipment

    def: minNumberOfTerminals() : Integer = 
        if Set{
                'CBR','DIS','CTR','PSH','BSH','CAB','GIL','LIN','RES','SCR','TCF','TCR'
            }->includes(self.type) then 2
         else if Set{
                    'VTR','PTW','GEN','CAP','REA','CON','MOT','FAN','EFN','BAT','RRC','SAR','SMC','IFL'
                    }->includes(self.type) then 1
        else if Set{
                    'AXN'
                    }->includes(self.type) then 0
        else -1
        endif endif endif

    def: maxNumberOfTerminals() : Integer = 
        if Set{
                'CBR','DIS','CTR','PTW','CAP','REA','CON','PSH','BSH','CAB','GIL','LIN','RES','SCR','TCF','TCR'
            }->includes(self.type) then 2
         else if Set{
                    'VTR','GEN','MOT','FAN','EFN','BAT','RRC','SAR','SMC','IFL'
                    }->includes(self.type) then 1
        else if Set{
                    'AXN'
                    }->includes(self.type) then 0
        else -1
        endif endif endif 

    def: expectedNumberOfTerminals() : String =
        let min : Integer = minNumberOfTerminals() in
        let max : Integer = maxNumberOfTerminals() in
        if( min = max ) then 'exactly ' + min.toString()
        else 'between ' + min.toString() + ' and ' + max.toString()
        endif


    -- The number of terminals depends on type
    inv ConductingEquipment_number_of_Terminals
        (   'ERROR;'
          + 'OCL/SemanticConstraints/ConductingEquipment_number_of_Terminals;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'the number of Terminals in ConductingEquipment of type ' + self.type + ' is wrong, it is '
          + self.Terminal->size().toString() + ', it should be ' + self.expectedNumberOfTerminals()
        )
        :
        let min : Integer = self.minNumberOfTerminals() in
        let max : Integer = self.maxNumberOfTerminals() in
        if( min = -1 ) then true
        else self.Terminal->size() >= min and self.Terminal->size() <= max
        endif
        
    -- The ConductingEquipment in Bay shall have unique name in SubEquipment, EqFunction (from SCL_Substation.xsd)
    inv ConductingEquipment_unique_name_from_Bay
        (   'ERROR;'
          + 'OCL/SemanticConstraints/ConductingEquipment_unique_name_from_Bay;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'Unique SubEquipment, EqFunction name in ConductingEquipment from Bay'
        )
    :
        self.oclContainer.oclIsTypeOf(Bay) implies 
        self.SubEquipment -> union(self.EqFunction) -> isUnique(n:Naming|n.name)
        
    -- The ConductingEquipment in Function shall have unique name in SubEquipment, EqFunction (from SCL_Substation.xsd)
    inv ConductingEquipment_unique_name_from_Function
        (   'ERROR;'
          + 'OCL/SemanticConstraints/ConductingEquipment_unique_name_from_Function;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'Unique SubEquipment, EqFunction name in ConductingEquipment from Function'
        )
    :
        self.oclContainer.oclIsTypeOf(Function) implies 
        self.SubEquipment -> union(self.EqFunction) -> isUnique(n:Naming|n.name)
        
    -- The ConductingEquipment in SubFunction shall have unique name in SubEquipment (from SCL_Substation.xsd)
    inv ConductingEquipment_unique_name_from_SubFunction
        (   'ERROR;'
          + 'OCL/SemanticConstraints/ConductingEquipment_unique_name_from_SubFunction;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'Unique SubEquipment name in ConductingEquipment from SubFunction'
        )
    :
        self.oclContainer.oclIsTypeOf(SubFunction) implies 
        self.SubEquipment -> isUnique(n:Naming|n.name)
        
endpackage

