/*
*************************************************************************
**  Copyright (c) 2016-2021 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context Terminal

    -- Within a Substation, the attribute pathName of a ConnectivityNode acts as
    -- a key (a ConnectivityNode may appear at bay level below the Substation).
    -- This implies that there cannot be two ConnectivityNode elements with the
    -- same pathName. The connectivityNode attribute of each Terminal in this
    -- Substation must then refer to one of these keys.

    inv Terminal_must_refer_CNode
        ( 'ERROR:[SemanticConstraints] Terminal element must reference one of the defined ConnectivityNodes(line ' + self.lineNumber.toString() + ')' )
        :
        ConnectivityNode.allInstances() -> collect( c : ConnectivityNode | c.pathName ) -> includes( self.connectivityNode )
        -- It is defined in SemanticConstraints/SCL.ocl that the pathName is unique
        
    -- References to connectivity nodes inside a line are only allowed inside Line elements.
    -- In Substation.ocl
    -- In this case the lineName attribute is required.    
    -- For references to connectivity nodes in substations from Substation or Line elements lineName shall not be used, 
    -- instead substationName, voltageLevelName and bayName are required.
    inv Terminal_cNode_in_Line_or_Substation
        ( 'ERROR:[SemanticConstraints] Terminal.cNode must reference a ConnectivityNodes either in Line either in Substation(line ' + self.lineNumber.toString() + ')' )
        :       
        self.lineName <> null and substationName = null and voltageLevelName = null and bayName = null
        or
        self.lineName = null and substationName <> null and voltageLevelName <> null and bayName <> null
        
    -- lineName is "The name of a line element containing the connectivityNode (only used inside Line element)"
    inv Terminal_consistent_lineName
        ( 'ERROR:[SemanticConstraints] lineName of Terminal shall be the name of the Line containing the cNode (line ' + self.lineNumber.toString() + '). ' )
        :
        let cnSet : Set( ConnectivityNode ) = ConnectivityNode.allInstances() -> select( c : ConnectivityNode | c.pathName = self.connectivityNode ) in
        if( cnSet -> size() = 1 ) then
            let cn : ConnectivityNode = cnSet -> any( true ) in
            ( cn.ParentLine <> null ) implies
                self.lineName = cn.ParentLine.name
        else
            true
        endif
    
    -- bayName is "The name of the bay containing the connectivityNode (only used to reference a substation, not a line)"
    inv Terminal_consistent_bayName
        ('ERROR:[SemanticConstraints] bayName of Terminal shall be the name of the Bay containing the cNode (line ' + self.lineNumber.toString() + '). ')
        :
        let cnSet : Set( ConnectivityNode ) = ConnectivityNode.allInstances() -> select( c : ConnectivityNode | c.pathName = self.connectivityNode ) in
        if( cnSet -> size() = 1 ) then
            let cn : ConnectivityNode = cnSet -> any( true ) in
            ( cn.ParentBay <> null ) implies
                self.bayName = cn.ParentBay.name
        else
            true
        endif
        
    -- voltageLevelName is "The name of the voltage level containing the connectivityNode (only used to reference a substation, not a line)"
    inv Terminal_consistent_voltageLevelName
        ('ERROR:[SemanticConstraints] voltageLevelName of Terminal shall be the name of the VoltageLevel containing the cNode (line ' + self.lineNumber.toString() + '). ')
        :
        let cnSet : Set( ConnectivityNode ) = ConnectivityNode.allInstances() -> select( c : ConnectivityNode | c.pathName = self.connectivityNode ) in
        if( cnSet -> size() = 1 ) then
            let cn : ConnectivityNode = cnSet -> any( true ) in
            ( cn.ParentBay <> null ) implies
                ( cn.ParentBay.ParentVoltageLevel <> null ) implies
                    self.voltageLevelName = cn.ParentBay.ParentVoltageLevel.name
        else
            true
        endif
        
    -- substationName is "The name of the substation containing the connectivityNode (only used to reference a substation, not a line)"
    inv Terminal_consistent_substationName
        ('ERROR:[SemanticConstraints] substationName of Terminal shall be the name of the VoltageLevel containing the cNode (line ' + self.lineNumber.toString() + '). ')
        :
        let cnSet : Set( ConnectivityNode ) = ConnectivityNode.allInstances() -> select( c : ConnectivityNode | c.pathName = self.connectivityNode ) in
        if( cnSet -> size() = 1 ) then
            let cn : ConnectivityNode = cnSet -> any( true ) in
            ( cn.ParentBay <> null ) implies
                ( cn.ParentBay.ParentVoltageLevel <> null ) implies
                    ( cn.ParentBay.ParentVoltageLevel.ParentSubstation <> null ) implies
                        self.substationName = cn.ParentBay.ParentVoltageLevel.ParentSubstation.name
        else
            true
        endif
        
     -- processName is "The name of a Process element containing the connectivityNode (only used if Process element is present)"
    inv Terminal_consistent_processName
        ('ERROR:[SemanticConstraints] processName of Terminal shall be the name of the Process containing the cNode (line ' + self.lineNumber.toString() + '). ')
        :
        let cnSet : Set( ConnectivityNode ) = ConnectivityNode.allInstances() -> select( c : ConnectivityNode | c.pathName = self.connectivityNode ) in
        if( cnSet -> size() = 1 ) then
            let cn : ConnectivityNode = cnSet -> any( true ) in
            if( cn.ParentLine <> null ) then
                if( cn.ParentLine.ParentProcess <> null ) then
                    self.processName = cn.ParentLine.ParentProcess.name
                else
                    self.processName = null
                endif
            else if( cn.ParentBay <> null ) then
                if( cn.ParentBay.ParentVoltageLevel<> null ) then
                    if( cn.ParentBay.ParentVoltageLevel.ParentSubstation <> null ) then
                        if( cn.ParentBay.ParentVoltageLevel.ParentSubstation.ParentProcess <> null ) then
                            self.processName = cn.ParentBay.ParentVoltageLevel.ParentSubstation.ParentProcess.name
                        else
                            true
                        endif
                    else
                        true
                    endif
                else
                    true
                endif
            else
                self.processName = null
            endif endif
        else
            true
        endif
        

    -- cNodeName is "The name of the connectivityNode"
    inv Terminal_consistent_cNodeName
        ('ERROR:[SemanticConstraints] cNodeName of Terminal shall be the name of the cNode (line ' + self.lineNumber.toString() + '). ')
        :
        let cnSet : Set( ConnectivityNode ) = ConnectivityNode.allInstances() -> select( c : ConnectivityNode | c.pathName = self.connectivityNode ) in
        if( cnSet -> size() = 1 ) then
            let cn : ConnectivityNode = cnSet -> any( true ) in
                self.cNodeName = cn.name
        else
            true
        endif
        
    
    -- a terminal must refer an existing ConnectivityNode
    inv Terminal_RefersToConnectivityNode
    ( 'ERROR:[SemanticConstraints] Terminal (name=' + self.name.toString() + ') (line ' + self.lineNumber.toString() + ') does not refer an existing ConnectivityNode' )
    :
        self.RefersToConnectivityNode <> null

endpackage

