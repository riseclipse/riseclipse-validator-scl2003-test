/*
*************************************************************************
**  Copyright (c) 2016-2021 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context Line

    -- In order to avoid any ambiguities, within a Line there cannot be two
    -- direct child elements with the same name.    
    inv Line_unique_DirectChild_name
    ( 'ERROR:[SemanticConstraints] All direct childs in Line shall have different name (line ' + self.lineNumber.toString() + ')' )
    :
        self.oclContents()->selectByKind( scl::Naming )->isUnique( n : Naming | n.name )
        -- Version when oclContents() is not available
        --   let childs_1 : OrderedSet( Naming ) = self.Function
        --in let childs_2 : OrderedSet( Naming ) = childs_1->union( self.GeneralEquipment )
        --in let childs_3 : OrderedSet( Naming ) = childs_2->union( self.PowerTransformer )
        --in let childs_4 : OrderedSet( Naming ) = childs_3->union( self.VoltageLevel )
        --in childs_4->isUnique( n : Naming | n.name )
        
        
    -- each contained element shall have a unique name        
    inv unique_name_same_level_in_Line
     ( 'ERROR:[SemanticConstraints] All names shall be unique at each hierarchy level within the Line (line ' + self.lineNumber.toString() + ')' )
    :   
        if self.ParentSCL <> null then
        SclObject.allInstances()->
        select(s:SclObject|self.ParentSCL.oclContents()->
            select(s:SclObject|s.lineNumber>self.lineNumber)->
            forAll(s1:SclObject|s1.lineNumber>s.lineNumber) 
            and s.lineNumber>self.lineNumber)->
            select(s:SclObject|s.oclIsKindOf(Naming))->
            exists(n1:Naming;n2:Naming|n1<>n2 
                and n1.oclContainer=n2.oclContainer 
                and n1.name=n2.name) implies false
        else
        SclObject.allInstances()->
        select(s:SclObject|self.ParentProcess.oclContents()->
            select(s:SclObject|s.lineNumber>self.lineNumber)->
            forAll(s1:SclObject|s1.lineNumber>s.lineNumber) 
            and s.lineNumber>self.lineNumber)->
            select(s:SclObject|s.oclIsKindOf(Naming))->
            exists(n1:Naming;n2:Naming|n1<>n2 
                and n1.oclContainer=n2.oclContainer 
                and n1.name=n2.name) implies false
        endif
    

endpackage

