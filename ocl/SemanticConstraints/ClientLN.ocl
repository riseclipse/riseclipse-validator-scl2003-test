/*
*************************************************************************
**  Copyright (c) 2016-2021 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context ClientLN

    -- iedName definition: "The name of the IED where the LN resides"
    inv iedName_consistency
    ( 'ERROR:[SemanticConstraints] iedName from ClientLN shall be the name of the IED containing the referred LN (line ' + self.lineNumber.toString() + ')' )
    :
        if self.iedName <> null and self.RefersToAnyLN <> null then 
        if self.RefersToAnyLN.oclContainer.oclIsTypeOf(LDevice) then 
            self.RefersToAnyLN.oclContainer.oclContainer.oclContainer.oclContainer -> collect(i:IED|i.name).matches(self.iedName)
                -> includes(true)
        else self.RefersToAnyLN.oclContainer.oclContainer -> collect(i:IED|i.name).matches(self.iedName) -> includes(true)
        endif else true endif
        
    -- ldInst definition: "The instance identification of the LD where the LN resides"
    inv ldInst_consistency
    ( 'ERROR:[SemanticConstraints] ldInst from ClientLN shall be the inst of the LDevice containing the referred LN (line ' + self.lineNumber.toString() + ')' )
    :
        if self.ldInst <> null and self.RefersToAnyLN <> null then 
        if self.RefersToAnyLN.oclContainer.oclIsTypeOf(LDevice) then 
            self.RefersToAnyLN.oclContainer -> collect(l:LDevice|l.inst).matches(self.ldInst)
                -> includes(true)
        else true
        endif else true endif

    -- prefix definition: "The LN prefix"
    inv perfix_consistency
    ( 'ERROR:[SemanticConstraints] prefix from ClientLN shall be the prefix of the referred LN (line ' + self.lineNumber.toString() + ')' )
    :
        if self.prefix <> null and self.RefersToAnyLN <> null then 
            self.RefersToAnyLN -> collect(l:LN|l.prefix).matches(self.prefix)
                -> includes(true)
        else true endif
        
    -- a ClientLN must refer an existing LN
    inv ClientLN_RefersToLNodeType
    ( 'ERROR:[SemanticConstraints] ClientLN (line ' + self.lineNumber.toString() + ') does not refer an existing LN' )
    :
        self.RefersToAnyLN <> null    
        

endpackage

