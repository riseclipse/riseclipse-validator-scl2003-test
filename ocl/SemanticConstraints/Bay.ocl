/*
*************************************************************************
**  Copyright (c) 2016-2022 CentraleSupélec & EDF.
**  All rights reserved. This program and the accompanying materials
**  are made available under the terms of the Eclipse Public License v2.0
**  which accompanies this distribution, and is available at
**  https://www.eclipse.org/legal/epl-v20.html
** 
**  This file is part of the RiseClipse tool
**  
**  Contributors:
**      Computer Science Department, CentraleSupélec
**      EDF R&D
**  Contacts:
**      dominique.marcadet@centralesupelec.fr
**      aurelie.dehouck-neveu@edf.fr
**  Web site:
**      https://riseclipse.github.io/
*************************************************************************
*/

import scl: 'http://www.iec.ch/61850/2003/SCL'

package scl

context Bay

    -- Within a Bay, there cannot be two direct PowerTransformer elements
    -- with the same name.
    -- done in EquipmentContainer.ocl
    
    -- Within a Bay, there cannot be two direct ConductingEquipment elements
    -- with the same name.
    inv Bay_unique_ConductingEquipment_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/Bay_unique_ConductingEquipment_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'ConductingEquipment in Bay shall have different name'
        )
    :
        self.ConductingEquipment->isUnique( c : ConductingEquipment | c.name )

    -- Within a Bay, there cannot be two direct GeneralEquipment elements
    -- with the same name.
    -- done in EquipmentContainer.ocl 

    --  In order to avoid any ambiguities, within a Bay, there cannot be two
    --  direct child elements with the same name.
    inv Bay_unique_DirectChild_name
        (   'ERROR;'
          + 'OCL/SemanticConstraints/Bay_unique_DirectChild_name;'
          + self.filename + ';'
          + self.lineNumber.toString() + ';'
          + 'All direct childs in Bay shall have different name'
        )
    :
        self.oclContents()->selectByKind( scl::Naming )->isUnique( n : Naming | n.name )
        -- Version when oclContents() is not available
        --   let childs_1 : OrderedSet( Naming ) = self.Function
        --in let childs_2 : OrderedSet( Naming ) = childs_1->union( self.GeneralEquipment )
        --in let childs_3 : OrderedSet( Naming ) = childs_2->union( self.PowerTransformer )
        --in let childs_4 : OrderedSet( Naming ) = childs_3->union( self.ConductingEquipment )
        --in let childs_5 : OrderedSet( Naming ) = childs_4->union( self.ConnectivityNode )
        --in childs_5->isUnique( n : Naming | n.name )


endpackage

